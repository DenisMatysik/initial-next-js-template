1. Файлы с названием index.js являются корневыми 
и в папке pages в каждой подпапке может быть файл index.js.
2. Для создания компонентов, использующихся по всему 
приложению используется папка components (footer, header и т.д).
3. Чтобы отображать на всех страницах footer и header можно :
а)на каждой странице добавлять footer и header - не эффективно;
б)создать компонент layout в ктороый будет оборачивать всё наше приложение в файле _app.js:

---layout :
const Layout = ({children}) => {
	return (
		<div className="content">
			<Header />
			{children}
			<Footer />
		</div>
	);
};

---_app.js корневой (в папке pages) :
const MyApp = ({Component, pageProps}) => {
	return (
		<Layout>
			<Component {...pageProps} />
		</Layout>
	);
};
4. глобальные стили импортируются в файле _app.js
5. Обычно стили в css пишуться модульно, с большой буквы название компонента, 
к которому пишуться ситили далее module.css- Footer.module.css; 
импортируются как import styles from "../styles/Home.module.css" и далее вызываем 
его через импортируемый styles <h1 className={styles.title}>Главная страница</h1>;
если необходимо присовить несоклько классов то прочто 
черех className={`${styles.title} ${styles.titleNext}`};
в css модулях (Footer.module.css) прописываем конкретные классы, 
без селекторов (.imageContainer div {...} - неправильно)
6. Автоматическое перенаправление на другие страинцы можно 
реализовать через хук useRouter from "next/router" - 
const router = useRouter();
useEffect(() => {
	setTimeout(() => {
		router.push("/");
	}, 3000);
}, []) - в данныо случае, при загрузке страницы через 3 секунды 
произойдёт автоматическое перенаправление на главную страницу (router.push("/"))
7. Для настройки СЕО сайта используют тег Head для каждой страницы
8. Для изображений в next.js используют спц элемент Image, все картники храняться в папке public;
для картинок можно добавить свойство placeholder="blur" - теперь картинка будет 
заблюрена, пока полностью не загрузиться.

9. Для создания данных с api на сервере и получение уже готовой страницы с этими данными в next.js 
используют функцию getServerSideProps (Server-side rendering) -  
export async function getServerSideProps() {
	const response = await fetch("https://jsonplaceholder.typicode.com/comments");
	const data = await response.json();
	return {
		props: {
			reviews: data.slice(0, 20),
		},
	};
И в таком случает нужно передать в страницу props со сзанчениями ({reviews}) 
const Reviews = ({reviews}) => {} - компонент (в нашем случае просто страница)
export default Reviews;
10. getStaticProps можно испольовать для получения данных с сервера:
export async function getStaticProps() {
  const res = await fetch('https://jsonplaceholder.typicode.com/users')
  const data = await res.json();
if(!data) { //-если данные не пришли
	return {
		notFound:true,
	}
}
  return { props: { users:data  } }
}
 
export default function Page({ users}) {
  return (<>
{users}
</>)
}

11. Динамические роуты - для передачи данных на страницы используют или ssr или ssG
Рендеринг на сервере и статичная генерация (SSR & SSG) - https://www.youtube.com/watch?v=-YwctEwGkCk&list=RDCMUCE9ODjNIkOHrnSdkYWLfYhg&index=8
12. api-https://www.youtube.com/watch?v=_9iWPtnzyt8&list=RDCMUCE9ODjNIkOHrnSdkYWLfYhg&index=9